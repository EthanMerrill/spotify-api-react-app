{"version":3,"sources":["components/D3Chart.js","components/SpotifySelectors.js","components/PlaylistInterface.js","pages/Home.js","components/Redirect.js","App.js","reportWebVitals.js","index.js"],"names":["D3Chart","props","data","trackAttribute","setSongIdOrder","useState","sortedData","setSortedData","bars","setBars","orderMethod","setOrderMethod","playlistStats","setPlaylistStats","chartOffset","chartHeight","length","useEffect","Math","max","apply","map","o","min","reduce","p","c","sort","a","b","tempDesc","everyOther","filter","element","index","OddsOther","dataFirstHalf","dataSecondHalf","concat","yScale","d3","domain","range","padding","xScale","d","id","chartData","trackName","name","x","y","indexOf","width","height","className","ToggleButtonGroup","color","value","exclusive","onChange","event","newAlignment","ToggleButton","toFixed","avg","style","fill","x1","x2","y1","y2","stroke","strokeWidth","barHeight","rx","SpotifySelectors","access_token","setSongsDetails","setTrackAttribute","setSelectedPlaylist","selectedPlaylist","playlists","setPlaylists","songlist","setSonglist","headers","axios","get","then","response","items","elm","label","error","console","log","promises","track","resp","popularity","Promise","all","results","Autocomplete","disablePortal","options","sx","isOptionEqualToValue","option","renderInput","params","TextField","PlaylistInterface","playlist","songIdOrder","userData","setUserData","playlistTextbox","setPlaylistTextbox","variant","e","text","target","onClick","playlistName","playlistSongs","method","url","saveNew","playlistId","addToPlaylist","Home","hash","window","location","substring","songsDetails","React","Redirect","clientId","process","redirect_uri","href","encodeURIComponent","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","mode","primary","main","light","dark","backgroundColor","contrastText","secondary","contrastThreshold","tonalOffset","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"8RAoMeA,EA5LC,SAACC,GAEb,IAAQC,EAASD,EAATC,KACAC,EAAmBF,EAAnBE,eACDC,EAAkBH,EAAlBG,eAEP,EAAoCC,mBAAS,MAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCJ,mBAAS,QAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA0CN,mBAAS,CAC/C,IAAO,EACP,IAAO,EACP,IAAO,IAHX,mBAAOO,EAAP,KAAsBC,EAAtB,KAQMC,EAAc,GAChBC,EAAcb,EAAQ,IAAI,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMc,QAA6BF,EAAe,EAK5EG,qBAAU,WAEO,OAATf,GACAW,EAAiB,CACb,IAAQK,KAAKC,IAAIC,MAAMF,KAAf,OAAqBhB,QAArB,IAAqBA,OAArB,EAAqBA,EAAMmB,KAAI,SAAUC,GAAK,OAAOA,EAAEnB,OAC/D,IAAQe,KAAKK,IAAIH,MAAMF,KAAf,OAAqBhB,QAArB,IAAqBA,OAArB,EAAqBA,EAAMmB,KAAI,SAAUC,GAAK,OAAOA,EAAEnB,OAC/D,KAAW,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMsB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEvB,KAAiB,KAA9C,OAAmDD,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAMc,YAGzE,CAACd,EAAMC,IAGVc,qBAAU,WACN,GAAa,OAATf,EACA,OAAQQ,GACJ,IAAK,aACDH,EAAc,YAAIL,GAAMyB,MAAK,SAACC,EAAGC,GAC7B,OAAOA,EAAE1B,GAAkByB,EAAEzB,OAEjC,MACJ,IAAK,YACFI,EAAc,YAAIL,GAAMyB,MAAK,SAACC,EAAGC,GAC5B,OAAOD,EAAEzB,GAAkB0B,EAAE1B,OAEjC,MACJ,IAAK,OACD,IAAI2B,EAAW,YAAI5B,GAAMyB,MAAK,SAACC,EAAGC,GAC9B,OAAOA,EAAE1B,GAAkByB,EAAEzB,MAG7B4B,EAAaD,EAASE,QAAO,SAACC,EAASC,GACvC,OAAOA,EAAQ,IAAM,KAErBC,EAAYL,EAASE,QAAO,SAACC,EAASC,GACtC,OAAOA,EAAQ,IAAM,KAGrBE,EAAgBL,EAAWJ,MAAK,SAACC,EAAGC,GACpC,OAAOD,EAAEzB,GAAkB0B,EAAE1B,MAE7BkC,EAAiBF,EAAUR,MAAK,SAACC,EAAGC,GACpC,OAAOA,EAAE1B,GAAkByB,EAAEzB,MAEjCI,EAAc6B,EAAcE,OAAOD,IACnC,MACJ,IAAK,OAGL,QACI9B,EAAcL,QAKtBO,EAAQ,QAEb,CAACC,EAAaP,EAAgBD,IAEjCe,qBAAU,WACN,GAA4B,qBAAhBX,EAA6B,CACrC,IAAIiC,EAASC,MAAeC,OAAOD,IAAA,OAAStC,QAAT,IAASA,OAAT,EAASA,EAAMc,SAAS0B,MAAM,CAAC,EAAG3B,EAAYD,IAAc6B,QAAQ,KACnGC,EAASJ,MAAiBC,OAAO,CAAC,EAAG7B,EAAcO,MAAMuB,MAAM,CAAC,EAAG,MAEvEtC,EAAc,OAACE,QAAD,IAACA,OAAD,EAACA,EAAYe,KAAI,SAAAwB,GAC3B,MAAM,iBAAN,OAAwBA,EAAEC,QAG9B,IAAIC,EAAS,OAAGzC,QAAH,IAAGA,OAAH,EAAGA,EAAYe,KAAI,SAAAwB,GAE5B,MAAO,CACHG,UAAS,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAGI,KACdC,EAAG,GACHC,EAAGZ,EAAM,OAACjC,QAAD,IAACA,OAAD,EAACA,EAAY8C,QAAQP,IAC9BQ,MAAOT,EAAOC,EAAE1C,IAChBmD,OAlFE,OAsFV7C,EAAQsC,MAEb,CAAC7C,EAAMa,EAAaZ,EAAgBS,EAAeF,EAAaJ,EAAYF,IAM/E,OACI,yCAEA,sBAAKmD,UAAY,gBAAjB,UACI,+CACI,eAACC,EAAA,EAAD,CACIC,MAAM,UACNC,MAAOhD,EACPiD,WAAS,EACTC,SAbK,SAACC,EAAOC,GACzBnD,EAAemD,IAQP,UAMI,cAACC,EAAA,EAAD,CAAcL,MAAM,OAApB,kBACA,cAACK,EAAA,EAAD,CAAcL,MAAM,YAApB,uBACA,cAACK,EAAA,EAAD,CAAcL,MAAM,aAApB,wBACA,cAACK,EAAA,EAAD,CAAcL,MAAM,OAApB,wBAKZ,qBAAKH,UAAY,sBAAjB,SACKrD,GACD,qCACI,sCAASC,EAAT,KAA2BS,EAAcW,IAAIyC,QAAQ,MACrD,sCAAS7D,EAAT,KAA2BS,EAAcO,IAAI6C,QAAQ,MACrD,0CAAa7D,EAAb,KAA+BS,EAAcqD,IAAID,QAAQ,WAKjE,qBAAKlB,GAAK,QAAV,SAGI,sBAAKA,GAAG,YAAYQ,OAAQvC,EAAasC,MA7H9B,IA6HX,UACI,sBAAMH,EAAG,GAAIC,EAAG,GAAIe,MAAO,CAACC,KAAM,WAAlC,SAA+ChE,IAC/C,sBAAM+C,EAAI1C,EAAOU,KAAKC,IAAIC,MAAMF,KAAMV,EAAKa,KAAI,SAAUC,GAAK,OAAOA,EAAE+B,MAAQ,OAAO,EAAI,GAAIF,EAAG,GAAIe,MAAO,CAAEC,KAAM,WAApH,mBACA,sBAAMC,GAAI,EAAGC,GAhIN,IAgIsBC,GAAIxD,GAAgByD,GAAIzD,GAAgB0D,OAAO,QAAQC,YAAY,OAG/FvE,GAAQM,IAAR,OACGA,QADH,IACGA,OADH,EACGA,EAAMa,KAAI,SAAAb,GACN,OAAO,8BACH,uBAAM0C,EAAG1C,EAAK0C,EAAI,IAAKC,EAAG3C,EAAK2C,EAAKuB,GAAe5D,EAAaoD,MAAO,CAAEC,KAAM,WAA/E,iBAA6F3D,QAA7F,IAA6FA,OAA7F,EAA6FA,EAAMwC,UAAnG,OACA,sBAAME,EAAG1C,EAAK0C,EAAGC,EAAG3C,EAAK2C,EAAIrC,EAAauC,MAAO7C,EAAK6C,MAAOC,OAAQ9C,EAAK8C,OAAQY,MAAO,CAAEC,KAAK,UAAWQ,GAAI,WAFpGnE,EAAK2C,OAQ3BjD,GAAQM,GACL,8BAEA,sBAAM4D,GAAIlD,KAAKC,IAAIC,MAAMF,KAAMV,EAAKa,KAAI,SAAUC,GAAK,OAAOA,EAAE+B,MAAQ,OAAQiB,GAAIxD,EAAauD,GAAInD,KAAKC,IAAIC,MAAMF,KAAMV,EAAKa,KAAI,SAAUC,GAAK,OAAOA,EAAE+B,MAAM,OAAQkB,GAAIxD,EAAayD,OAAO,QAAQC,YAAY,OACrN,sBAAML,GAAI,GAAIE,GAAIxD,EAAauD,GAAI,GAAIE,GAAIxD,EAAayD,OAAO,QAAQC,YAAY,mB,2CCjCxFG,EAjIU,SAAC3E,GAEtB,IAAO4E,EAAgB5E,EAAhB4E,aAEAC,EAAmB7E,EAAnB6E,gBAEAC,EAAqB9E,EAArB8E,kBACA5E,EAAkBF,EAAlBE,eAEA6E,EAAuB/E,EAAvB+E,oBACAC,EAAoBhF,EAApBgF,iBAEP,EAAkC5E,mBAAS,sBAA3C,mBAAO6E,EAAP,KAAkBC,EAAlB,KAEA,EAAgC9E,mBAAS,MAAzC,mBAAO+E,EAAP,KAAiBC,EAAjB,KAKApE,qBAAU,WAEN,IAAMqE,EAAU,CACZ,cAAiB,UAAYT,GAEjCU,IAAMC,IAAN,mDAA8D,CAAEF,QAASA,IACpEG,MAAK,SAACC,GAAc,IAAD,IAChBP,EAAY,OAACO,QAAD,IAACA,GAAD,UAACA,EAAUxF,YAAX,iBAAC,EAAgByF,aAAjB,aAAC,EAAuBtE,KAAI,SAAAuE,GACpC,MAAO,CAAEC,MAAOD,EAAI3C,KAAM/C,KAAM0F,UAErC,SAACE,GACAC,QAAQC,IAAIF,QAGrB,CAACjB,IAGJ5D,qBAAU,WAEN,GAAgC,qBAAtBgE,EAAkC,CACxC,IAAMK,EAAU,CACZ,cAAiB,UAAYT,GAEjCU,IAAMC,IAAN,sDAAkDP,QAAlD,IAAkDA,OAAlD,EAAkDA,EAAkBnC,GAApE,WAAiF,CAAEwC,QAASA,IACvFG,MAAK,SAACC,GAAc,IAAD,EAChBL,EAAYK,GACJ,OAARN,QAAQ,IAARA,GAAA,UAAAA,EAAUO,aAAV,SAAiBtE,KAAI,SAAAuE,GACjB,OAAOA,QAEZ,SAACE,GACAC,QAAQC,IAAI,aAAcf,EAAkBa,WAGpDC,QAAQC,IAAI,wBACZlB,EAAgB,MAChBO,EAAY,QAEjB,CAACJ,EAAkBJ,EAAnB,OAAiCO,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAUO,MAAOb,IAGrD7D,qBAAU,WACN,GAAImE,GAA0C,qBAAtBH,EAAkC,CAAC,IAAD,IAClDgB,EAAQ,OAAGb,QAAH,IAAGA,GAAH,UAAGA,EAAUlF,YAAb,iBAAG,EAAgByF,aAAnB,aAAG,EAAuBtE,KAAI,SAAA6E,GACtC,IAAMZ,EAAU,CACZ,cAAiB,UAAYT,GAEjC,OAAOU,IAAMC,IAAN,oDAAuDU,EAAMA,MAAMpD,IAAM,CAAEwC,QAASA,IACtFG,MAAK,SAACC,GAEH,IAAIS,EAAI,OAAIT,QAAJ,IAAIA,OAAJ,EAAIA,EAAUxF,KAItB,OAHAiG,EAAI,KAAYD,EAAMA,MAAMjD,KAC5BkD,EAAI,WAAkBD,EAAMA,MAAME,WAE3BD,KACR,SAACL,GAEA,OADAC,QAAQC,IAAIF,GACLA,QAInBO,QAAQC,IAAIL,GAAUR,MAAK,SAAAc,GACvBzB,EAAgByB,WAGpBzB,EAAgB,QAErB,CAACG,EAAkBJ,EAAcO,EAAUN,IAU9C,OAAQ,mCAEJ,sBAAKvB,UAAU,cAAf,UACA,cAACiD,EAAA,EAAD,CACIC,eAAa,EACb3D,GAAG,YACH4D,QAASxB,EACTyB,GAAI,CAAEtD,MAAO,KACbO,SAAU,SAACC,EAAOH,GAAR,OAAkBsB,EAAmB,OAACtB,QAAD,IAACA,OAAD,EAACA,EAAOxD,OACvD0G,qBAAsB,SAACC,EAAQnD,GAAT,OAAmBmD,EAAO/D,KAAOY,EAAMZ,IAC7DgE,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBlB,MAAM,iBAE1D,sBAAKtC,UAAU,WAAf,UACA,8CACA,eAACC,EAAA,EAAD,CACIC,MAAM,UACNC,MAAOvD,EACPwD,WAAS,EACTC,SAzBa,SAACC,EAAOC,GACzBiB,EAAkBjB,IAoBlB,UAMI,cAACC,EAAA,EAAD,CAAcN,MAAM,YAAYC,MAAM,eAAtC,0BACA,cAACK,EAAA,EAAD,CAAcL,MAAM,SAApB,oBACA,cAACK,EAAA,EAAD,CAAcL,MAAM,MAApB,iBAEA,cAACK,EAAA,EAAD,CAAcL,MAAM,cAApB,yBACA,cAACK,EAAA,EAAD,CAAcL,MAAM,QAApB,+BC3BGuD,EAhGW,SAAChH,GAEvB,IAAOiH,EAAYjH,EAAZiH,SACArC,EAAgB5E,EAAhB4E,aACAsC,EAAelH,EAAfkH,YAGP,EAAgC9G,mBAAS,MAAzC,mBAAO+G,EAAP,KAAiBC,EAAjB,KACA,EAA8ChH,mBAAS,MAAvD,mBAAOiH,EAAP,KAAwBC,EAAxB,KAOAtG,qBAAU,WACN,IAAMqE,EAAU,CACZ,cAAiB,UAAYT,GAEjCU,IAAMC,IAAN,iCAA4C,CAAEF,QAASA,IAClDG,MAAK,SAACC,GACHK,QAAQC,IAAIN,EAASxF,KAAK4C,IAC1BuE,EAAY3B,MACb,SAACI,GACAC,QAAQC,IAAIF,QAEtB,CAACjB,IA0DH,OACI,mCACA,sBAAK/B,GAAG,oBAAR,UACI,cAACkE,EAAA,EAAD,CAAWlE,GAAG,iBAAiB+C,MAAM,gBAAgB2B,QAAQ,WAAW5D,SAAU,SAAC6D,GAAD,OAPnEC,EAO0FD,EAAEE,OAAOjE,WANtH6D,EAAmBG,GADD,IAACA,GAO2GhE,MAAO4D,IACjI,qBAAK/D,UAAU,6BAA6BqE,QAAS,kBA1D/C,SAAC/C,EAAcuC,EAAUS,EAAcC,GAEjD,IAAMxC,EAAU,CACZ,cAAiB,UAAYT,GAE3B3E,EAAO,CACT,KAAQ2H,EACR,YAAe,+BACf,QAAU,GAGdtC,IAAM,CACFwC,OAAQ,OACRC,IAAI,oCAAD,OAAsCZ,EAASlH,KAAK4C,GAApD,cACHwC,QAASA,EACTpF,KAAMA,IAELuF,MAAK,SAACC,GACH,IAAMJ,EAAU,CACZ,cAAiB,UAAYT,GAGjCU,IAAM,CACFwC,OAAQ,OACRC,IAAI,wCAAD,OAA0CtC,EAASxF,KAAK4C,GAAxD,WACHwC,QAASA,EACTpF,KAAM,CAAC,KAAQ4H,QAGxB,SAAChC,GACAC,QAAQC,IAAIF,MA4B+CmC,CAAQpD,EAAcuC,EAAUE,EAAiBH,IAA5G,kCACA,sBAAK5D,UAAU,6BAA6BqE,QAAS,kBAzBzC,SAAC/C,EAAcuC,EAAUc,EAAYJ,GACrD,IAAMxC,EAAU,CACZ,cAAiB,UAAYT,GAGjCU,IAAM,CACFwC,OAAQ,MACRC,IAAI,wCAAD,OAA0CE,EAA1C,WACH5C,QAASA,EACTpF,KAAM,CAAE,KAAQ4H,KACjBrC,MAAM,SAAAC,GACLK,QAAQC,IAAIN,MAc+CyC,CAActD,EAAcuC,EAAUF,EAASpE,GAAIqE,IAA9G,uBAAuID,EAAWA,EAASjE,KAAO,IAAlK,qBC5DGmF,EA5BF,SAACnI,GACV,IAAMoI,EAAOC,OAAOC,SAASF,KACvBxD,EAAewD,EAAKG,UAAU,GAAIH,EAAKjF,QAAQ,gBAGrD,EAAwC/C,mBAAS,MAAjD,mBAAOoI,EAAP,KAAqB3D,EAArB,KACA,EAA4C4D,IAAMrI,SAAS,SAA3D,mBAAOF,EAAP,KAAuB4E,EAAvB,KACA,EAAgD1E,mBAAS,MAAzD,mBAAO4E,EAAP,KAAyBD,EAAzB,KACA,EAAsC3E,mBAAS,MAA/C,mBAAO8G,EAAP,KAAoB/G,EAApB,KAEA,OAEI,gCACI,cAAC,EAAD,CAAkBmD,UAAY,OAAOsB,aAAcA,EAAcC,gBAAmBA,EAAiB3E,eAAkBA,EAAgB4E,kBAAqBA,EAAmBC,oBAAuBA,EAAqBC,iBAAoBA,IAE/O,uBACA,sBAAK1B,UAAU,mBAAf,UACI,cAAC,EAAD,CAAmB2D,SAAUjC,EAAkBJ,aAAcA,EAAcsC,YAAaA,IACxF,cAAC,EAAD,CAASjH,KAAMuI,EAActI,eAAkBA,EAAgBC,eAAkBA,WCNlFuI,EAdE,SAAC1I,GACd,IAAM2I,EAAWC,mCACXC,EAAY,UAAMR,OAAOC,SAASQ,KAAtB,UAMlB,OAJA9H,qBAAU,WACNqH,OAAOC,SAASQ,KAAhB,2DAA2EH,EAA3E,kBAA6FI,mBAFlF,wEAEX,yBAAwIF,EAAxI,oCACD,CAACF,EAAUE,IAGV,yB,iBCoBOG,EAvBH,SAAChJ,GAEX,OAEE,sBAAKsD,UAAU,MAAf,UAEE,wBAAQA,UAAU,aAAlB,SAEI,4CAGJ,+BACA,cAAC,IAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAO2F,KAAM,0BAA0BC,OAAK,EAACC,UAAWT,IACxD,cAAC,IAAD,CAAOO,KAAK,+BAA+BC,OAAK,EAACC,UAAahB,eCZ3DiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9D,MAAK,YAAkD,IAA/C+D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCEVO,EAAQC,YAAY,CAEtBC,QAAS,CACPC,KAAM,OACNC,QAAS,CAGPC,KAAM,UACNC,MAAO,SACPC,KAAM,UACNC,gBAAiB,UACjBC,aAAc,WAIhBC,UAAW,CACTJ,MAAO,UACPD,KAAM,UACNE,KAAM,UAENE,aAAc,WAIhBE,kBAAmB,EAInBC,YAAa,MAKjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAehB,MAASA,EAAxB,SACA,cAAC,EAAD,QAGFiB,SAASC,eAAe,SAM1B1B,M","file":"static/js/main.e09fe95d.chunk.js","sourcesContent":["import React, { Children, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3'\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport { chipClasses } from '@mui/material';\r\n\r\n// https://www.youtube.com/watch?v=zXBdNDnqV2Q\r\n\r\nconst D3Chart = (props) => {\r\n    // destructure props\r\n    const { data } = props // don't want to see props other places. \r\n    const { trackAttribute } = props\r\n    const {setSongIdOrder} = props\r\n    // State Variables\r\n    const [sortedData, setSortedData] = useState(null)\r\n    const [bars, setBars] = useState(null)\r\n    const [orderMethod, setOrderMethod] = useState('None')\r\n    const [playlistStats, setPlaylistStats] = useState({\r\n        'max': 0,\r\n        'min': 0,\r\n        'avg': 0\r\n        })\r\n    //constant vars\r\n    const barHeight = 30\r\n    const chartWidth = 800\r\n    const chartOffset = 40\r\n    let chartHeight = data ? (data?.length * (barHeight + 5)) + (chartOffset) : 0 \r\n\r\n    //use effects\r\n\r\n        //update stats\r\n    useEffect(() => {\r\n\r\n        if (data !== null){\r\n            setPlaylistStats({\r\n                'max': (Math.max.apply(Math, data?.map(function (o) { return o[trackAttribute] }))),\r\n                'min': (Math.min.apply(Math, data?.map(function (o) { return o[trackAttribute] }))),\r\n                'avg': data?.reduce((p, c) => p + c[trackAttribute], 0) / data?.length\r\n            })\r\n        }\r\n    }, [data, trackAttribute])\r\n    \r\n        // a method to sort the playlist\r\n    useEffect(() => {\r\n        if (data !== null){\r\n            switch (orderMethod) {\r\n                case 'Descending':\r\n                    setSortedData([...data].sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    }))\r\n                    break\r\n                case 'Ascending':\r\n                   setSortedData([...data].sort((a, b) => {\r\n                        return a[trackAttribute] - b[trackAttribute]\r\n                    }))\r\n                    break\r\n                case 'Peak':\r\n                    let tempDesc = [...data].sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    })\r\n\r\n                    let everyOther = tempDesc.filter((element, index) => {\r\n                        return index % 2 === 0;\r\n                    })\r\n                    let OddsOther = tempDesc.filter((element, index) => {\r\n                        return index % 2 !== 0;\r\n                    })\r\n\r\n                    let dataFirstHalf = everyOther.sort((a, b) => {\r\n                        return a[trackAttribute] - b[trackAttribute]\r\n                    })\r\n                    let dataSecondHalf = OddsOther.sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    })\r\n                    setSortedData(dataFirstHalf.concat(dataSecondHalf))\r\n                    break\r\n                case 'None':\r\n                    setSortedData(data)\r\n                    break\r\n                default:\r\n                    setSortedData(data)\r\n                    break\r\n\r\n            }\r\n        } else {\r\n            setBars(null)\r\n        }\r\n    }, [orderMethod, trackAttribute, data])\r\n\r\n    useEffect(() => {\r\n        if (typeof (sortedData) !== 'undefined') {\r\n            let yScale = d3.scaleBand().domain(d3.range(data?.length)).range([0, chartHeight-chartOffset]).padding(.05)\r\n            let xScale = d3.scaleLinear().domain([0, playlistStats.max]).range([0, 100])\r\n            \r\n            setSongIdOrder(sortedData?.map(d => {\r\n                return `spotify:track:${d.id}`\r\n            }))\r\n\r\n            let chartData = sortedData?.map(d => {\r\n\r\n                return {\r\n                    trackName: d?.name,\r\n                    x: 50,\r\n                    y: yScale(sortedData?.indexOf(d)),\r\n                    width: xScale(d[trackAttribute]),\r\n                    height: barHeight,\r\n                }\r\n            \r\n            })\r\n            setBars(chartData)\r\n        }\r\n    }, [data, chartHeight, trackAttribute, playlistStats, orderMethod, sortedData, setSongIdOrder])\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setOrderMethod(newAlignment);\r\n    };\r\n\r\n    return (\r\n        <> {/*this iS A FRAGMENT*/}\r\n        \r\n        <div className = 'sort-controls'>\r\n            <h3>Sort Method  </h3>\r\n                <ToggleButtonGroup\r\n                    color=\"primary\"\r\n                    value={orderMethod}\r\n                    exclusive\r\n                    onChange={handleChange}\r\n                >\r\n                    <ToggleButton value=\"None\">None</ToggleButton>\r\n                    <ToggleButton value=\"Ascending\">Ascending</ToggleButton>\r\n                    <ToggleButton value=\"Descending\">Descending</ToggleButton>\r\n                    <ToggleButton value=\"Peak\">Peak</ToggleButton>\r\n\r\n                </ToggleButtonGroup>\r\n        </div>\r\n\r\n        <div className = 'playlist-stats card'>\r\n            {data &&\r\n            <>\r\n                <h3>Min {trackAttribute}: {playlistStats.min.toFixed(2)}</h3>\r\n                <h3>Max {trackAttribute}: {playlistStats.max.toFixed(2)}</h3>\r\n                <h3>Average {trackAttribute}: {playlistStats.avg.toFixed(2)}</h3>\r\n            </>\r\n            }\r\n        </div>\r\n\r\n        <div id = 'chart'>\r\n           \r\n            {/* Add a TERNARY ??, React Fragments sort of like an invisible bundler div */}\r\n            <svg id='songChart' height={chartHeight} width={chartWidth}>\r\n                <text x={50} y={15} style={{fill: '#FFFFFF'}}>{trackAttribute}</text>\r\n                <text x={ bars ? Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))+8 : 20} y={15} style={{ fill: '#FFFFFF' }}>Songs</text>\r\n                <line x1={0} x2={chartWidth} y1={chartOffset-15} y2={chartOffset-15} stroke='white' strokeWidth='.1' />\r\n                \r\n\r\n                {data && bars &&\r\n                    bars?.map(bars => {\r\n                        return <g key={bars.y}>\r\n                            <text x={bars.x + 110} y={bars.y + (barHeight/1.5)+chartOffset} style={{ fill: '#FFFFFF' }}>{bars?.trackName} </text>\r\n                            <rect x={bars.x} y={bars.y + chartOffset} width={bars.width} height={bars.height} style={{ fill:'#1DB954', rx: '4px'}}></rect>\r\n                            \r\n                        </g>\r\n                    })\r\n                \r\n                }\r\n                {data && bars &&\r\n                    <g>\r\n\r\n                    <line x1={Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))} y1={chartOffset} x2={Math.max.apply(Math, bars.map(function (o) { return o.width+50 }))} y2={chartHeight} stroke='white' strokeWidth=\".3\" />\r\n                    <line x1={50} y1={chartOffset} x2={50} y2={chartHeight} stroke='white' strokeWidth=\".3\"/>\r\n\r\n                    {/* Max Lines */}\r\n                    {/* <line x1={Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))} x2={300} y1={chartOffset} y2={30} stroke='white' strokeWidth='.3'/> */}\r\n                    {/* Avg Line */}\r\n                    {/* <line x1={} x2={} y1={} y2={} stroke='white' strokeWidth='.3'/> */}\r\n\r\n                    {/* Min Ln */}\r\n                        {/* <line x1={Math.min.apply(Math, bars.map(function (o) { return o.width + 50 }))} x2={200} y1={chartOffset} y2={30} stroke='white' strokeWidth='.3'/> */}\r\n                    {/* <line x1={} x2={} y1={} y2={} stroke='white' strokeWidth='.3'/> */}\r\n                    </g>\r\n                }\r\n                \r\n            </svg>\r\n           \r\n        </div>\r\n         </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default D3Chart","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\nconst SpotifySelectors = (props) => {\r\n    //destructure\r\n    const {access_token} = props\r\n\r\n    const {setSongsDetails} = props\r\n\r\n    const {setTrackAttribute} = props\r\n    const {trackAttribute} = props\r\n    \r\n    const {setSelectedPlaylist} = props\r\n    const {selectedPlaylist} = props\r\n    //state vars\r\n    const [playlists, setPlaylists] = useState('No Playlists Found')\r\n    // const [selectedPlaylist, setSelectedPlaylist] = useState(null)\r\n    const [songlist, setSonglist] = useState(null)\r\n    //const vars\r\n\r\n    //use effects\r\n        //Get Spotify Playlists\r\n    useEffect(() => {\r\n        \r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token\r\n        }\r\n        axios.get(`https://api.spotify.com/v1/me/playlists?limit=50`, { headers: headers })\r\n            .then((response) => {\r\n                setPlaylists(response?.data?.items?.map(elm => {\r\n                    return { label: elm.name, data: elm }\r\n                }))\r\n            }, (error) => {\r\n                console.log(error);\r\n            })\r\n\r\n    }, [access_token]);\r\n\r\n        // get songs in the playlists\r\n    useEffect(() => {\r\n        // Cleaner way of doing this??\r\n        if(typeof(selectedPlaylist) !== 'undefined'){   \r\n            const headers = {\r\n                'Authorization': 'Bearer ' + access_token\r\n            }\r\n            axios.get(`https://api.spotify.com/v1/playlists/${selectedPlaylist?.id}/tracks`, { headers: headers })\r\n                .then((response) => {\r\n                    setSonglist(response)\r\n                    songlist?.items?.map(elm => {\r\n                        return elm\r\n                    })\r\n                }, (error) => {\r\n                    console.log('this error', selectedPlaylist, error);\r\n                })\r\n        } else {\r\n            console.log('no playlist selected')\r\n            setSongsDetails(null)\r\n            setSonglist(null)\r\n        }\r\n    }, [selectedPlaylist, access_token, songlist?.items, setSongsDetails])\r\n\r\n        // get the details of each song in the songlist\r\n    useEffect(() => {\r\n        if (songlist && typeof (selectedPlaylist) !== 'undefined'){\r\n            let promises = songlist?.data?.items?.map(track => {\r\n                const headers = {\r\n                    'Authorization': 'Bearer ' + access_token\r\n                }\r\n                return axios.get(`https://api.spotify.com/v1/audio-features/${track.track.id}`, { headers: headers })\r\n                    .then((response) => {\r\n                        // console.log(track.track.name, track.track.popularity, track.track.id, response)\r\n                        let resp = (response?.data)\r\n                        resp['name'] = (track.track.name)\r\n                        resp['popularity'] = (track.track.popularity)\r\n\r\n                        return(resp)\r\n                    }, (error) => {\r\n                        console.log(error)\r\n                        return(error)\r\n                    })\r\n                    \r\n            })\r\n            Promise.all(promises).then(results => {\r\n                setSongsDetails(results)\r\n            })\r\n        } else {\r\n            setSongsDetails(null)\r\n        }\r\n    }, [selectedPlaylist, access_token, songlist, setSongsDetails])\r\n\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setTrackAttribute(newAlignment);\r\n\r\n    };\r\n\r\n\r\n    //jsx return\r\n    return (<>\r\n\r\n        <div className='inputs-flex'>\r\n        <Autocomplete\r\n            disablePortal\r\n            id=\"combo-box\"\r\n            options={playlists}\r\n            sx={{ width: 300 }}\r\n            onChange={(event, value) => setSelectedPlaylist(value?.data)}\r\n            isOptionEqualToValue={(option, value) => option.id === value.id}\r\n            renderInput={(params) => <TextField {...params} label=\"Playlist\" />}\r\n        />\r\n        <div className='mini-box'>\r\n        <h3> Sort Metric</h3>\r\n        <ToggleButtonGroup\r\n            color=\"primary\"\r\n            value={trackAttribute}\r\n            exclusive\r\n            onChange={handleChange}\r\n        >\r\n            <ToggleButton color='secondary' value=\"danceability\">danceability</ToggleButton>\r\n            <ToggleButton value=\"energy\">energy</ToggleButton>\r\n            <ToggleButton value=\"key\">key</ToggleButton>\r\n            {/* <ToggleButton value=\"loudness\">loudness</ToggleButton> */}\r\n            <ToggleButton value=\"speechiness\">speechiness</ToggleButton>\r\n            <ToggleButton value=\"tempo\">tempo</ToggleButton>\r\n        </ToggleButtonGroup>\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default SpotifySelectors\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst PlaylistInterface = (props) => {\r\n    //deconstruct props\r\n    const {playlist} = props\r\n    const {access_token} = props\r\n    const {songIdOrder} = props\r\n   \r\n    // state vars\r\n    const [userData, setUserData] = useState(null)\r\n    const [playlistTextbox, setPlaylistTextbox] = useState(null)\r\n\r\n    // use effects\r\n        // update the textbox\r\n\r\n\r\n        // get the user id\r\n    useEffect(()=>{\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n        axios.get(`https://api.spotify.com/v1/me/`, { headers: headers })\r\n            .then((response) => {\r\n                console.log(response.data.id)\r\n                setUserData(response)\r\n            }, (error) => {\r\n                console.log(error);\r\n            })\r\n    },[access_token])\r\n\r\n    //other functions\r\n        // save a new playlist\r\n    let saveNew = (access_token, userData, playlistName, playlistSongs) => {\r\n       \r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n        const data = {\r\n            \"name\": playlistName,\r\n            \"description\": \"Playlist Sorted with Jamsort\",\r\n            \"public\": true\r\n        }\r\n        // axios.post(`https://api.spotify.com/v1/users/${userData.data.id}/playlists`, { headers: headers, body: data})\r\n        axios({\r\n            method: 'post',\r\n            url: `https://api.spotify.com/v1/users/${userData.data.id}/playlists`,\r\n            headers: headers,\r\n            data: data\r\n        })\r\n            .then((response) => {\r\n                const headers = {\r\n                    'Authorization': 'Bearer ' + access_token,\r\n                }\r\n\r\n                axios({\r\n                    method: 'post',\r\n                    url: `https://api.spotify.com/v1/playlists/${response.data.id}/tracks`,\r\n                    headers: headers,\r\n                    data: {\"uris\": playlistSongs}\r\n                })\r\n            \r\n        }, (error) => {\r\n            console.log(error);\r\n            })\r\n        }\r\n\r\n    let addToPlaylist = (access_token, userData, playlistId, playlistSongs)=>{\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n\r\n        axios({\r\n            method: 'put',\r\n            url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\r\n            headers: headers,\r\n            data: { \"uris\": playlistSongs }\r\n        }).then((response=>{\r\n            console.log(response)\r\n        }))\r\n    }\r\n\r\n        //handle textbox change event\r\n    let textboxOnChange = (text) => {\r\n        setPlaylistTextbox(text)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div id='playlistInterface'>\r\n            <TextField id=\"outlined-basic\" label=\"Playlist Name\" variant=\"outlined\" onChange={(e) => textboxOnChange(e.target.value)} value={playlistTextbox}></TextField>\r\n            <div className='sp-button sp-flat sp-light' onClick={() => saveNew(access_token, userData, playlistTextbox, songIdOrder)} >Save as new Playlist</div>\r\n            <div className='sp-button sp-flat sp-light' onClick={() => addToPlaylist(access_token, userData, playlist.id, songIdOrder)}>Overwrite {playlist ? playlist.name : \" \"} Playlist</div>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlaylistInterface","import React, {useState } from 'react';\r\nimport D3Chart from '../components/D3Chart'\r\nimport SpotifySelectors from '../components/SpotifySelectors';\r\nimport PlaylistInterface from '../components/PlaylistInterface';\r\n\r\nconst Home = (props) => {\r\n    const hash = window.location.hash\r\n    const access_token = hash.substring(14, hash.indexOf('&token_type'))\r\n\r\n\r\n    const [songsDetails, setSongsDetails] = useState(null)\r\n    const [trackAttribute, setTrackAttribute] = React.useState('tempo');\r\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null)\r\n    const [songIdOrder, setSongIdOrder] = useState(null)\r\n\r\n    return (\r\n        \r\n        <div>\r\n            <SpotifySelectors className = \"card\" access_token={access_token} setSongsDetails = {setSongsDetails} trackAttribute = {trackAttribute} setTrackAttribute = {setTrackAttribute} setSelectedPlaylist = {setSelectedPlaylist} selectedPlaylist = {selectedPlaylist}/>\r\n         \r\n            <hr/>\r\n            <div className='song-chart-frame'>\r\n                <PlaylistInterface playlist={selectedPlaylist} access_token={access_token} songIdOrder={songIdOrder} />\r\n                <D3Chart data={songsDetails} trackAttribute = {trackAttribute} setSongIdOrder = {setSongIdOrder}>\r\n                   \r\n                </D3Chart>\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    ) \r\n\r\n}\r\nexport default Home","\r\nimport React, { useEffect } from 'react';\r\n\r\nconst Redirect = (props) => {\r\n    const clientId = process.env.REACT_APP_CLIENT_KEY;\r\n    const redirect_uri = `${window.location.href}/index`;\r\n    const scopes = 'playlist-modify-private playlist-read-private playlist-modify-public'\r\n    useEffect(() => {\r\n        window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&scope=${encodeURIComponent(scopes)}&redirect_uri=${redirect_uri}&response_type=token&state=123`;\r\n    }, [clientId, redirect_uri]);\r\n\r\n    return (\r\n        <div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Redirect;","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport Redirect from './components/Redirect'\nimport {BrowserRouter as Router,\n  Switch,\n  Route} from 'react-router-dom'\n// https://levelup.gitconnected.com/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6\n\nconst App = (props) => {\n\n  return (\n\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n\n          <h2>Jam Sort</h2>\n        \n      </header>\n      <body>\n      <Router>\n        <Switch>\n            <Route path= \"/spotify-api-react-app/\" exact component={Redirect}/>\n            <Route path=\"/spotify-api-react-app/index\" exact component = {Home}/>\n        </Switch>\n      </Router>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n//pull in use styles from material u core. Pass in the degailt theme object\n//\nlet theme = createTheme({\n\n  palette: {\n    mode: 'dark',\n    primary: {\n      // light: will be calculated from palette.primary.main,\n     \n      main: '#FFFFFF',\n      light: '#FFFFF',\n      dark: '#FF0000',\n      backgroundColor: '#FFFFFF',\n      contrastText: '#FFFFFF'\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#b3b3b3',\n      main: '#b3b3b3',\n      dark: '#181818',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#FFFFFF',\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme = {theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}