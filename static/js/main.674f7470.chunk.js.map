{"version":3,"sources":["components/D3Chart.js","components/SpotifySelectors.js","components/PlaylistInterface.js","pages/Home.js","components/Redirect.js","App.js","reportWebVitals.js","index.js"],"names":["D3Chart","props","data","trackAttribute","setSongIdOrder","useState","sortedData","setSortedData","bars","setBars","orderMethod","setOrderMethod","playlistStats","setPlaylistStats","chartOffset","chartHeight","length","useEffect","Math","max","apply","map","o","min","reduce","p","c","sort","a","b","tempDesc","everyOther","filter","element","index","OddsOther","dataFirstHalf","dataSecondHalf","concat","yScale","d3","domain","range","padding","xScale","d","id","chartData","trackName","track","name","x","y","indexOf","width","height","className","ToggleButtonGroup","color","value","exclusive","onChange","event","newAlignment","ToggleButton","toFixed","avg","style","fill","x1","x2","y1","y2","stroke","strokeWidth","barHeight","rx","SpotifySelectors","access_token","setSongsDetails","setTrackAttribute","setSelectedPlaylist","selectedPlaylist","playlists","setPlaylists","songlist","setSonglist","headers","axios","get","then","response","items","elm","label","error","console","log","trackids","promises","method","url","String","Object","assign","audio_features","find","alert","Promise","resolve","results","get50SongsDetails","Autocomplete","disablePortal","options","sx","isOptionEqualToValue","option","renderInput","params","TextField","PlaylistInterface","playlist","songIdOrder","userData","setUserData","playlistTextbox","setPlaylistTextbox","variant","e","text","target","onClick","playlistName","playlistSongs","status","statusText","saveNew","playlistId","addToPlaylist","Home","hash","window","location","substring","songsDetails","React","Redirect","clientId","process","redirect_uri","href","lengt","encodeURIComponent","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","mode","primary","main","light","dark","backgroundColor","contrastText","secondary","contrastThreshold","tonalOffset","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.674f7470.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as d3 from 'd3'\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\n// https://www.youtube.com/watch?v=zXBdNDnqV2Q\r\n\r\nconst D3Chart = (props) => {\r\n    // destructure props\r\n    const { data } = props // don't want to see props other places. \r\n    const { trackAttribute } = props\r\n    const {setSongIdOrder} = props\r\n    // State Variables\r\n    const [sortedData, setSortedData] = useState(null)\r\n    const [bars, setBars] = useState(null)\r\n    const [orderMethod, setOrderMethod] = useState('None')\r\n    const [playlistStats, setPlaylistStats] = useState({\r\n        'max': 0,\r\n        'min': 0,\r\n        'avg': 0\r\n        })\r\n    //constant vars\r\n    const barHeight = 30\r\n    const chartWidth = 800\r\n    const chartOffset = 40\r\n    let chartHeight = data ? (data?.length * (barHeight + 5)) + (chartOffset) : 0 \r\n\r\n    //use effects\r\n\r\n        //update stats\r\n    useEffect(() => {\r\n\r\n        if (data !== null){\r\n            setPlaylistStats({\r\n                'max': (Math.max.apply(Math, data?.map(function (o) { return o[trackAttribute] }))),\r\n                'min': (Math.min.apply(Math, data?.map(function (o) { return o[trackAttribute] }))),\r\n                'avg': data?.reduce((p, c) => p + c[trackAttribute], 0) / data?.length\r\n            })\r\n        }\r\n    }, [data, trackAttribute])\r\n    \r\n        // a method to sort the playlist\r\n    useEffect(() => {\r\n        if (data !== null){\r\n            switch (orderMethod) {\r\n                case 'Descending':\r\n                    setSortedData([...data].sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    }))\r\n                    break\r\n                case 'Ascending':\r\n                   setSortedData([...data].sort((a, b) => {\r\n                        return a[trackAttribute] - b[trackAttribute]\r\n                    }))\r\n                    break\r\n                case 'Peak':\r\n                    let tempDesc = [...data].sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    })\r\n\r\n                    let everyOther = tempDesc.filter((element, index) => {\r\n                        return index % 2 === 0;\r\n                    })\r\n                    let OddsOther = tempDesc.filter((element, index) => {\r\n                        return index % 2 !== 0;\r\n                    })\r\n\r\n                    let dataFirstHalf = everyOther.sort((a, b) => {\r\n                        return a[trackAttribute] - b[trackAttribute]\r\n                    })\r\n                    let dataSecondHalf = OddsOther.sort((a, b) => {\r\n                        return b[trackAttribute] - a[trackAttribute]\r\n                    })\r\n                    setSortedData(dataFirstHalf.concat(dataSecondHalf))\r\n                    break\r\n                case 'None':\r\n                    setSortedData(data)\r\n                    break\r\n                default:\r\n                    setSortedData(data)\r\n                    break\r\n\r\n            }\r\n        } else {\r\n            setBars(null)\r\n        }\r\n    }, [orderMethod, trackAttribute, data])\r\n\r\n    useEffect(() => {\r\n        if (typeof (sortedData) !== 'undefined') {\r\n            // console.log(sortedData)\r\n            let yScale = d3.scaleBand().domain(d3.range(data?.length)).range([0, chartHeight-chartOffset]).padding(.05)\r\n            let xScale = d3.scaleLinear().domain([0, playlistStats.max]).range([0, 100])\r\n\r\n            setSongIdOrder(sortedData?.map(d => {\r\n                return `spotify:track:${d?.id}`\r\n            }))\r\n            \r\n            let chartData = sortedData?.map(d => {\r\n                return {\r\n                    trackName: d?.track?.name,\r\n                    x: 50,\r\n                    y: yScale(sortedData?.indexOf(d)),\r\n                    width: xScale(d[trackAttribute]),\r\n                    height: barHeight,\r\n                }\r\n            \r\n            })\r\n            setBars(chartData)\r\n        }\r\n    }, [data, chartHeight, trackAttribute, playlistStats, orderMethod, sortedData, setSongIdOrder])\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setOrderMethod(newAlignment);\r\n    };\r\n\r\n    return (\r\n        <> {/*this iS A FRAGMENT*/}\r\n        \r\n        <div className = 'sort-controls'>\r\n            <h3>Sort Method  </h3>\r\n                <ToggleButtonGroup\r\n                    color=\"primary\"\r\n                    value={orderMethod}\r\n                    exclusive\r\n                    onChange={handleChange}\r\n                >\r\n                    <ToggleButton value=\"None\">None</ToggleButton>\r\n                    <ToggleButton value=\"Ascending\">Ascending</ToggleButton>\r\n                    <ToggleButton value=\"Descending\">Descending</ToggleButton>\r\n                    <ToggleButton value=\"Peak\">Peak</ToggleButton>\r\n\r\n                </ToggleButtonGroup>\r\n        </div>\r\n\r\n        <div className = 'playlist-stats card'>\r\n            {data &&\r\n            <>\r\n                <h3>Min {trackAttribute}: {playlistStats.min.toFixed(2)}</h3>\r\n                <h3>Max {trackAttribute}: {playlistStats.max.toFixed(2)}</h3>\r\n                <h3>Average {trackAttribute}: {playlistStats.avg.toFixed(2)}</h3>\r\n            </>\r\n            }\r\n        </div>\r\n\r\n        <div id = 'chart'>\r\n           \r\n            {/* Add a TERNARY ??, React Fragments sort of like an invisible bundler div */}\r\n            <svg id='songChart' height={chartHeight} width={chartWidth}>\r\n                <text x={50} y={15} style={{fill: '#FFFFFF'}}>{trackAttribute}</text>\r\n                <text x={ bars ? Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))+8 : 20} y={15} style={{ fill: '#FFFFFF' }}>Songs</text>\r\n                <line x1={0} x2={chartWidth} y1={chartOffset-15} y2={chartOffset-15} stroke='white' strokeWidth='.1' />\r\n                \r\n\r\n                {data && bars &&\r\n                    bars?.map(bars => {\r\n                        return <g key={bars.y}>\r\n                            <text x={bars.x + 110} y={bars.y + (barHeight/1.5)+chartOffset} style={{ fill: '#FFFFFF' }}>{bars?.trackName} </text>\r\n                            <rect x={bars.x} y={bars.y + chartOffset} width={bars.width} height={bars.height} style={{ fill:'#1DB954', rx: '4px'}}></rect>\r\n                            \r\n                        </g>\r\n                    })\r\n                \r\n                }\r\n                {data && bars &&\r\n                    <g>\r\n\r\n                    <line x1={Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))} y1={chartOffset} x2={Math.max.apply(Math, bars.map(function (o) { return o.width+50 }))} y2={chartHeight} stroke='white' strokeWidth=\".3\" />\r\n                    <line x1={50} y1={chartOffset} x2={50} y2={chartHeight} stroke='white' strokeWidth=\".3\"/>\r\n\r\n                    {/* Max Lines */}\r\n                    {/* <line x1={Math.max.apply(Math, bars.map(function (o) { return o.width + 50 }))} x2={300} y1={chartOffset} y2={30} stroke='white' strokeWidth='.3'/> */}\r\n                    {/* Avg Line */}\r\n                    {/* <line x1={} x2={} y1={} y2={} stroke='white' strokeWidth='.3'/> */}\r\n\r\n                    {/* Min Ln */}\r\n                        {/* <line x1={Math.min.apply(Math, bars.map(function (o) { return o.width + 50 }))} x2={200} y1={chartOffset} y2={30} stroke='white' strokeWidth='.3'/> */}\r\n                    {/* <line x1={} x2={} y1={} y2={} stroke='white' strokeWidth='.3'/> */}\r\n                    </g>\r\n                }\r\n                \r\n            </svg>\r\n           \r\n        </div>\r\n         </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default D3Chart","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\nconst SpotifySelectors = (props) => {\r\n    //destructure\r\n    const {access_token} = props\r\n\r\n    const {setSongsDetails} = props\r\n\r\n    const {setTrackAttribute} = props\r\n    const {trackAttribute} = props\r\n    \r\n    const {setSelectedPlaylist} = props\r\n    const {selectedPlaylist} = props\r\n    //state vars\r\n    const [playlists, setPlaylists] = useState(['No Playlists Found'])\r\n    // const [selectedPlaylist, setSelectedPlaylist] = useState(null)\r\n    const [songlist, setSonglist] = useState(null)\r\n    //const vars\r\n\r\n    //use effects\r\n        //Get Spotify Playlists\r\n    useEffect(() => {\r\n        \r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token\r\n        }\r\n        axios.get(`https://api.spotify.com/v1/me/playlists?limit=50`, { headers: headers })\r\n            .then((response) => {\r\n                setPlaylists(response?.data?.items?.map(elm => {\r\n                    return { label: elm.name, data: elm }\r\n                }))\r\n            }, (error) => {\r\n                console.log(error);\r\n            })\r\n\r\n    }, [access_token]);\r\n\r\n        // get songs in the playlists\r\n    useEffect(() => {\r\n        // Cleaner way of doing this??\r\n        if(typeof(selectedPlaylist) !== 'undefined'){   \r\n            const headers = {\r\n                'Authorization': 'Bearer ' + access_token\r\n            }\r\n            axios.get(`https://api.spotify.com/v1/playlists/${selectedPlaylist?.id}/tracks`, { headers: headers })\r\n                .then((response) => {\r\n                    setSonglist(response)\r\n                    songlist?.items?.map(elm => {\r\n                        return elm\r\n                    })\r\n                }, (error) => {\r\n                    console.log('this error', selectedPlaylist, error);\r\n                })\r\n        } else {\r\n            console.log('no playlist selected')\r\n            setSongsDetails(null)\r\n            setSonglist(null)\r\n        }\r\n    }, [selectedPlaylist, access_token, songlist?.items, setSongsDetails])\r\n\r\n        // get the details of each song in the songlist\r\n    useEffect(() => {\r\n\r\n        //Function to get all song information and details, up to 50 tracks at a time:\r\n        const get50SongsDetails = (songlist) => {\r\n            const headers = {\r\n                'Authorization': 'Bearer ' + access_token\r\n            }\r\n            let trackids = songlist?.data?.items?.map(track => {\r\n                return (track.track.id)\r\n            })\r\n            let promises = axios({\r\n                method: 'GET',\r\n                url: `https://api.spotify.com/v1/audio-features/?ids=${String(trackids)}`,\r\n                headers: headers\r\n            }).then((response) => {\r\n\r\n                // console.log(response.data.audio_features)\r\n                // console.log(songlist.data.items)\r\n                let res = songlist.data.items.map(track => {\r\n                    return Object.assign(track, response.data.audio_features.find(elm => elm?.id === track?.track?.id))\r\n                })\r\n                return (res)\r\n            }, (error) => {\r\n                console.log(error)\r\n                alert(error)\r\n                return (error)\r\n            })\r\n\r\n            Promise.resolve(promises).then(results => {\r\n                setSongsDetails(results)\r\n            })\r\n        }\r\n\r\n\r\n        if (songlist && typeof (selectedPlaylist) !== 'undefined'){\r\n            // let fullSongsDetails = []\r\n            // console.log(songlist?.data?.items.length)\r\n            // for(let i=0; i<songlist?.data?.items.length;i=i+50){\r\n            //     fullSongsDetails.push(...songlist?.data?.items?.slice(i, i + 50))\r\n            // }\r\n            // console.log(fullSongsDetails)\r\n           setSongsDetails(get50SongsDetails(songlist))\r\n        } else {\r\n            setSongsDetails(null)\r\n        }\r\n\r\n\r\n    }, [selectedPlaylist, access_token, songlist, setSongsDetails])\r\n\r\n    \r\n\r\n\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setTrackAttribute(newAlignment);\r\n\r\n    };\r\n\r\n\r\n    //jsx return\r\n    return (<>\r\n\r\n        <div className='inputs-flex'>\r\n        <Autocomplete\r\n            disablePortal\r\n            id=\"combo-box\"\r\n            options={playlists}\r\n            sx={{ width: 300 }}\r\n            onChange={(event, value) => setSelectedPlaylist(value?.data)}\r\n            isOptionEqualToValue={(option, value) => option.id === value.id}\r\n            renderInput={(params) => <TextField {...params} label=\"Playlist\" />}\r\n        />\r\n        <div className='mini-box'>\r\n        <h3> Sort Metric</h3>\r\n        <ToggleButtonGroup\r\n            color=\"primary\"\r\n            value={trackAttribute}\r\n            exclusive\r\n            onChange={handleChange}\r\n        >\r\n            <ToggleButton color='secondary' value=\"danceability\">danceability</ToggleButton>\r\n            <ToggleButton value=\"energy\">energy</ToggleButton>\r\n            <ToggleButton value=\"key\">key</ToggleButton>\r\n            {/* <ToggleButton value=\"loudness\">loudness</ToggleButton> */}\r\n            <ToggleButton value=\"speechiness\">speechiness</ToggleButton>\r\n            <ToggleButton value=\"tempo\">tempo</ToggleButton>\r\n        </ToggleButtonGroup>\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default SpotifySelectors\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst PlaylistInterface = (props) => {\r\n    //deconstruct props\r\n    const {playlist} = props\r\n    const {access_token} = props\r\n    const {songIdOrder} = props\r\n   \r\n    // state vars\r\n    const [userData, setUserData] = useState(null)\r\n    const [playlistTextbox, setPlaylistTextbox] = useState(\"\")\r\n\r\n    // use effects\r\n        // update the textbox\r\n\r\n\r\n        // get the user id\r\n    useEffect(()=>{\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n        axios.get(`https://api.spotify.com/v1/me/`, { headers: headers })\r\n            .then((response) => {\r\n                setUserData(response)\r\n            }, (error) => {\r\n                console.log(error);\r\n            })\r\n    },[access_token])\r\n\r\n    //other functions\r\n        // save a new playlist\r\n    let saveNew = (access_token, userData, playlistName, playlistSongs) => {\r\n       \r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n        const data = {\r\n            \"name\": playlistName,\r\n            \"description\": \"Playlist Sorted with Jamsort\",\r\n            \"public\": true\r\n        }\r\n        // axios.post(`https://api.spotify.com/v1/users/${userData.data.id}/playlists`, { headers: headers, body: data})\r\n        axios({\r\n            method: 'post',\r\n            url: `https://api.spotify.com/v1/users/${userData.data.id}/playlists`,\r\n            headers: headers,\r\n            data: data\r\n        })\r\n            .then((response) => {\r\n                const headers = {\r\n                    'Authorization': 'Bearer ' + access_token,\r\n                }\r\n\r\n                axios({\r\n                    method: 'post',\r\n                    url: `https://api.spotify.com/v1/playlists/${response.data.id}/tracks`,\r\n                    headers: headers,\r\n                    data: {\"uris\": playlistSongs}\r\n                }).then((response)=>{\r\n                    if (response.status === 201){\r\n                        alert(`Playlist Saved as: ${data.name}`)\r\n                    }else{\r\n                        alert(`error: ${response.status}, ${response.statusText}`)\r\n                    }\r\n                    console.log(response)\r\n                })  \r\n            \r\n        }, (error) => {\r\n            console.log(error);\r\n            })\r\n        }\r\n\r\n    let addToPlaylist = (access_token, userData, playlistId, playlistSongs)=>{\r\n        const headers = {\r\n            'Authorization': 'Bearer ' + access_token,\r\n        }\r\n\r\n        axios({\r\n            method: 'put',\r\n            url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\r\n            headers: headers,\r\n            data: { \"uris\": playlistSongs }\r\n        }).then((response=>{\r\n            if (response.status === 201) {\r\n                alert('Playlist Overwritten!')\r\n            } else {\r\n                alert(`error: ${response.status}, ${response.statusText}`)\r\n            }\r\n            console.log(response)\r\n        }))\r\n    }\r\n\r\n        //handle textbox change event\r\n    let textboxOnChange = (text) => {\r\n        setPlaylistTextbox(text)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div id='playlistInterface'>\r\n            <TextField id=\"outlined-basic\" label=\"Playlist Name\" variant=\"outlined\" onChange={(e) => textboxOnChange(e.target.value)} value={playlistTextbox}></TextField>\r\n            <div className='sp-button sp-flat sp-light' onClick={() => saveNew(access_token, userData, playlistTextbox, songIdOrder)} >Save as new Playlist</div>\r\n            <div className='sp-button sp-flat sp-light' onClick={() => addToPlaylist(access_token, userData, playlist.id, songIdOrder)}>Overwrite {playlist ? playlist.name : \" \"} Playlist</div>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlaylistInterface","import React, {useState } from 'react';\r\nimport D3Chart from '../components/D3Chart'\r\nimport SpotifySelectors from '../components/SpotifySelectors';\r\nimport PlaylistInterface from '../components/PlaylistInterface';\r\n\r\nconst Home = (props) => {\r\n    const hash = window.location.hash\r\n    const access_token = hash.substring(14, hash.indexOf('&token_type'))\r\n\r\n\r\n    const [songsDetails, setSongsDetails] = useState(null)\r\n    const [trackAttribute, setTrackAttribute] = React.useState('tempo');\r\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null)\r\n    const [songIdOrder, setSongIdOrder] = useState(null)\r\n\r\n    return (\r\n        \r\n        <div>\r\n            <SpotifySelectors className = \"card\" access_token={access_token} setSongsDetails = {setSongsDetails} trackAttribute = {trackAttribute} setTrackAttribute = {setTrackAttribute} setSelectedPlaylist = {setSelectedPlaylist} selectedPlaylist = {selectedPlaylist}/>\r\n         \r\n            <hr/>\r\n            <div className='song-chart-frame'>\r\n                <PlaylistInterface playlist={selectedPlaylist} access_token={access_token} songIdOrder={songIdOrder} />\r\n                <D3Chart data={songsDetails} trackAttribute = {trackAttribute} setSongIdOrder = {setSongIdOrder}>\r\n                   \r\n                </D3Chart>\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    ) \r\n\r\n}\r\nexport default Home","\r\nimport React, { useEffect } from 'react';\r\n\r\nconst Redirect = (props) => {\r\n    const clientId = process.env.REACT_APP_CLIENT_KEY;\r\n    let redirect_uri = String(window.location.href)\r\n\r\n    if (redirect_uri[redirect_uri.lengt-1]===\"/\") {\r\n        redirect_uri = `${window.location.href}index`;\r\n    }else{\r\n        redirect_uri = `${window.location.href}/index`;\r\n    }\r\n    \r\n    const scopes = 'playlist-modify-private playlist-read-private playlist-modify-public'\r\n    useEffect(() => {\r\n        window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientId}&scope=${encodeURIComponent(scopes)}&redirect_uri=${redirect_uri}&response_type=token&state=123`;\r\n\r\n\r\n    }, [clientId, redirect_uri]);\r\n\r\n    return (\r\n        <div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Redirect;","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport Redirect from './components/Redirect'\nimport {BrowserRouter as Router,\n  Switch,\n  Route} from 'react-router-dom'\n// https://levelup.gitconnected.com/how-to-build-a-spotify-player-with-react-in-15-minutes-7e01991bc4b6\n\nconst App = (props) => {\n\n  return (\n\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n\n          <h2>Jam Sort</h2>\n        \n      </header>\n      <div className='body'>\n      <Router>\n        <Switch>\n            <Route path= \"/spotify-api-react-app/\" exact component={Redirect}/>\n            <Route path=\"/spotify-api-react-app/index\" exact component = {Home}/>\n        </Switch>\n      </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n//pull in use styles from material u core. Pass in the degailt theme object\n//\nlet theme = createTheme({\n\n  palette: {\n    mode: 'dark',\n    primary: {\n      // light: will be calculated from palette.primary.main,\n     \n      main: '#FFFFFF',\n      light: '#FFFFF',\n      dark: '#FF0000',\n      backgroundColor: '#FFFFFF',\n      contrastText: '#FFFFFF'\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#b3b3b3',\n      main: '#b3b3b3',\n      dark: '#181818',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#FFFFFF',\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme = {theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}